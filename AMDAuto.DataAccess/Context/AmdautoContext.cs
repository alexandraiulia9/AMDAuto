// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using AMDAuto.DataAccess.Logger;
using AMDAuto.Entities;
using AMDAuto.Entities.Views;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace AMDAuto.DataAccess
{
    public partial class AmdautoContext : DbContext
    {
        public AmdautoContext()
        {
            this.ChangeTracker.LazyLoadingEnabled = false;
        }

        public AmdautoContext(DbContextOptions<AmdautoContext> options)
            : base(options)
        {
            this.ChangeTracker.LazyLoadingEnabled = false;
        }

        public DbQuery<VwMostOperations> VwMostOperations { get; set; }
        public DbQuery<VwMostClients> VwMostClients { get; set; }
        public DbQuery<VwMostCarParts> VwMostCarParts { get; set; }
        public virtual DbSet<Appointments> Appointments { get; set; }
        public virtual DbSet<CarOperations> CarOperations { get; set; }
        public virtual DbSet<CarParts> CarParts { get; set; }
        public virtual DbSet<CarPartsUsage> CarPartsUsage { get; set; }
        public virtual DbSet<Cars> Cars { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<Comments> Comments { get; set; }
        public virtual DbSet<EmployeeTypes> EmployeeTypes { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<MakeNames> MakeNames { get; set; }
        public virtual DbSet<ModelNames> ModelNames { get; set; }
        public virtual DbSet<Operations> Operations { get; set; }
        public virtual DbSet<PastAppointments> PastAppointments { get; set; }
        public virtual DbSet<Photos> Photos { get; set; }
        public virtual DbSet<Reviews> Reviews { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Query<VwMostOperations>().ToView("mostOperations", "dbo");
            modelBuilder.Query<VwMostClients>().ToView("mostClients", "dbo");
            modelBuilder.Query<VwMostCarParts>().ToView("mostCarParts", "dbo");

            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");


            modelBuilder.Entity<Appointments>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.ApprovalStatus).HasMaxLength(20);

                entity.HasOne(d => d.Car)
                    .WithMany(p => p.Appointments)
                    .HasForeignKey(d => d.CarId)
                    .HasConstraintName("appointment_car_fk");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Appointments)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("appointment_category_fk");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.Appointments)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("appointments_employees_fk");

                entity.HasOne(d => d.Operation)
                    .WithMany(p => p.Appointments)
                    .HasForeignKey(d => d.OperationId)
                    .HasConstraintName("appointment_operation_fk");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Appointments)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("appointment_user_fk");

            });

            modelBuilder.Entity<CarOperations>(entity =>
            {
                entity.HasKey(e => new { e.CarId, e.OperationId })
                    .HasName("CarOperation_pk");

                entity.Property(e => e.CreatedOne).HasColumnType("datetime");

                entity.HasOne(d => d.Car)
                    .WithMany(p => p.CarOperations)
                    .HasForeignKey(d => d.CarId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("carOperation_car_fk");

                entity.HasOne(d => d.Operation)
                    .WithMany(p => p.CarOperations)
                    .HasForeignKey(d => d.OperationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("carOperation_user_fk");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CarOperations)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("carOperation_operation_fk");
            });

            modelBuilder.Entity<CarParts>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name).HasMaxLength(30);

                entity.HasOne(d => d.Operation)
                    .WithMany(p => p.CarParts)
                    .HasForeignKey(d => d.OperationId)
                    .HasConstraintName("fk_carparts_oeprations");
            });

            modelBuilder.Entity<CarPartsUsage>(entity =>
            {
                entity.HasKey(e => new { e.AppointmentId, e.PartId })
                    .HasName("carpartsusage_pk");

                entity.HasOne(d => d.Appointment)
                    .WithMany(p => p.CarPartsUsage)
                    .HasForeignKey(d => d.AppointmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("carpartsusage_appointment_fk");

                entity.HasOne(d => d.Part)
                    .WithMany(p => p.CarPartsUsage)
                    .HasForeignKey(d => d.PartId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("carpartusage_parts_fk");
            });

            modelBuilder.Entity<Cars>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.LicenseNumber).HasMaxLength(20);

                entity.HasOne(d => d.MakeName)
                    .WithMany(p => p.Cars)
                    .HasForeignKey(d => d.MakeNameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_cars_makenames");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.Cars)
                    .HasForeignKey(d => d.ModelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_cars_models");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Cars)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("user_car_fk");
            });

            modelBuilder.Entity<Categories>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<Comments>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Content).HasMaxLength(500);

                entity.HasOne(d => d.Review)
                    .WithMany(p => p.Comments)
                    .HasForeignKey(d => d.ReviewId)
                    .HasConstraintName("comments_reviews_fk");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Comments)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("comments_user_fk");
            });

            modelBuilder.Entity<EmployeeTypes>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Employees>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_employees_users");
            });

            modelBuilder.Entity<MakeNames>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<ModelNames>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.HasOne(d => d.Make)
                    .WithMany(p => p.ModelNames)
                    .HasForeignKey(d => d.MakeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_modelnames_makenames");
            });

            modelBuilder.Entity<Operations>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Operations)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("fk_operations_categories");
            });

            modelBuilder.Entity<PastAppointments>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.HasOne(d => d.Car)
                    .WithMany(p => p.PastAppointments)
                    .HasForeignKey(d => d.CarId)
                    .HasConstraintName("fk_cars_pastappointments");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.PastAppointments)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("fk_categories_pastappointments");

                entity.HasOne(d => d.Operation)
                    .WithMany(p => p.PastAppointments)
                    .HasForeignKey(d => d.OperationId)
                    .HasConstraintName("fk_operations_pastappointments");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PastAppointments)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_users_pastappointments");
            });

            modelBuilder.Entity<Photos>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Content).IsRequired();
            });

            modelBuilder.Entity<Reviews>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Content).HasMaxLength(500);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Reviews)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("reviews_user_fk");
            });

            modelBuilder.Entity<Roles>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Password).HasMaxLength(20);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("user_role_fk");
            });

        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseLoggerFactory(new AMDAutoLoggerFactory());
        }
    }
}